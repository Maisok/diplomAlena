<?php

namespace App\Http\Controllers;

use App\Models\News;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class NewsController extends Controller
{
    public function index()
    {
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        $news = News::latest()->paginate(10);
        return view('admin.news.index', compact('news'));
    }

    public function create()
    {
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        return view('admin.news.create');
    }

    public function store(Request $request)
    {
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        $validated = $request->validate([
            'title' => 'required|string|max:200',
            'description' => 'required|string|max:600',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ], [
            'title.max' => '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤',
            'description.required' => '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            'image.image' => '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
            'image.mimes' => '–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpeg, png, jpg, gif, svg',
            'image.max' => '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2MB',
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if ($request->hasFile('image')) {
            $image = $request->file('image');
            $filename = Str::slug($validated['title']) . '-' . time() . '.' . $image->getClientOriginalExtension();
            $path = $image->storeAs('news_images', $filename, 'public');
            $validated['image'] = $path;
        }

        $validated['admin_id'] = Auth::id();

        $news = News::create($validated);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        $this->sendToTelegram($news);

        return redirect()->route('news.index')
            ->with('success', '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
    }

    public function edit(News $news)
    {
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        return view('admin.news.edit', compact('news'));
    }

    public function update(Request $request, News $news)
    {   
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        $validated = $request->validate([
            'title' => 'required|string|max:200',
            'description' => 'required|string|max:600',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ], [
            'title.max' => '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤',
            'description.required' => '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
            'image.image' => '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
            'image.mimes' => '–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpeg, png, jpg, gif, svg',
            'image.max' => '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2MB',
        ]);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if ($request->hasFile('image')) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if ($news->image) {
                Storage::disk('public')->delete($news->image);
            }

            $image = $request->file('image');
            $filename = Str::slug($validated['title']) . '-' . time() . '.' . $image->getClientOriginalExtension();
            $path = $image->storeAs('news_images', $filename, 'public');
            $validated['image'] = $path;
        }

        $news->update($validated);

        return redirect()->route('news.index')
            ->with('success', '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
    }

    public function destroy(News $news)
    {
        if (!auth()->user()->isAdmin()) {
            return redirect()->route('home');
        }
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if ($news->image) {
            Storage::disk('public')->delete($news->image);
        }

        $news->delete();

        return redirect()->route('news.index')
            ->with('success', '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
    }

    public function show(News $news)
    {
        
        $newsItems = News::latest()->paginate(10);
        return view('news', compact('newsItems'));
    }

    public function list()
    {
        $news = News::latest()->paginate(5);
        return view('news.index', compact('news'));
    }

    private function sendToTelegram(News $news)
    {
        try {
            $message = "üì¢ <b>–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å!</b>\n\n".
                       "<b>{$news->title}</b>\n\n".
                       "{$news->description}\n\n".
                       "<a href=\"".url('/news/'.$news->id)."\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>";
    
            $payload = [
                'chat_id' => env('TELEGRAM_CHANNEL_ID'),
                'parse_mode' => 'HTML'
            ];
    
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if ($news->image) {
                $imagePath = storage_path('app/public/'.$news->image);
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                $response = Http::withoutVerifying()
                    ->attach('photo', fopen($imagePath, 'r'))
                    ->post("https://api.telegram.org/bot".env('TELEGRAM_BOT_TOKEN')."/sendPhoto", [
                        'chat_id' => env('TELEGRAM_CHANNEL_ID'),
                        'caption' => $message,
                        'parse_mode' => 'HTML'
                    ]);
            } else {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                $response = Http::withoutVerifying()
                    ->post("https://api.telegram.org/bot".'7651468520:AAGBmLjvDVMG9aB6FuP7aT8e63sEoorXlBE'."/sendMessage", [
                        'chat_id' => '-1002196805641',
                        'text' => $message,
                        'parse_mode' => 'HTML'
                    ]);
            }
    
            if (!$response->successful()) {
                \Log::error('Telegram API Error: '.$response->body());
                throw new \Exception($response->body());
            }
    
        } catch (\Exception $e) {
            \Log::error('Telegram sending error: '.$e->getMessage());
        }
    }
}